AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template EC2InstanceWithSecurityGroup: Create an Amazon EC2
  instance running SEAS CentOS AMI on the us-east region. This template creates an EC2
  instance that uses an already created security groups. It also uses user-data to configure
  the instance as ansible server.
Parameters:
  UserName:
    Type: String
    Default: stakes
  UserPublicSSHKey:
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNYU79UnTp45+15TSo87MYZxipa5CT84dT8NuuN7W5tdduKxPnrDtCztOYtzzbpYZrfBYPqnEy86T3KqqmLfYmz8adG8T/zqWz8U2EjZZNATRwCxTjUktkJ/DIFWYPVA6mZKqQkM5+7eNGhd+yg8uPq7iBokRrDDVzlgUlBO3qwGVE2frekUZ3Rtu+FEDIVL+VBQuLPOHVrYN8+6ikpwt8dsIfXaYParlHGDb46ZJgY4WHOKsjqjiOG27yacWqTsG2XZYwEtHWfpAxJ1QqsfssrKACUJC3oVav3RLGNvtNfVZ2hWZOSN8DO9knD4fp3otoVxNegTxuL25JNGa+B0/f sta283@g.harvard.edu
  AnsiblePublicSSHKey:
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC78GHCoDs1RivHC6UCi0fQFpy6MveDCqmBaK7GgMvX89ba7Ir1sxxKewBBwTFg1DHqVYixaPet0GB+gXGVcbLP4pqn97KRx9XF3mMW6UnHJ4TDjVk0sZaaIQS7+0HMz68C3OOm7LUEjjuAqgGq1whZMhkflOVkULTVyJw3ICTHO5su6zPAY6UsbxVp+06inushd5tZ/KNQ9mFUg7UvQiqedVRwQ3TWiXNhzjvFNBM/09IUrtSJQdOdchpi3OUVVWpckhEgoIeSa8c5BOTjU7z04w1pzc1vCglI+kUSIOwNBXvnV6vuROpD/txdf0ZJPqx2hlXidjL6a9OuDcFZmtgd Damien@Damien
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  AMI:
    Description: AMI to create the EC2
    Type: String
    Default: ami-058f0b6d904c90419
  Subnet:
    Description: Subnet to host the EC2
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: subnet where this machine reside
  Expiration:
    Description: Time to terminate or re-evaluate the machine
    Type: String
    Default: 'Jan 1st 2020'
  SecurityGroup:
    Description: Name of security group
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
Resources:
  NetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref Subnet
      GroupSet: !Ref SecurityGroup
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface
          DeviceIndex: '0'
      ImageId: !Ref AMI
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}
        -
          Key: OS
          Value: !Ref Expiration
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              yum update -y
              adduser ${USERNAME}
              echo ${USERNAME} 'ALL=(ALL) NOPASSWD:ALL'>>/etc/sudoers.d/${USERNAME}
              mkdir /home/${USERNAME}/.ssh
              echo ${USERPUBLICSSHKEY} > /home/${USERNAME}/.ssh/authorized_keys
              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}/.ssh
              chmod 700 /home/${USERNAME}/.ssh
              chmod 600 /home/${USERNAME}/.ssh/authorized_keys
              mkdir -p /root/.ssh
              echo ${ANSIBLEPUBLICSSHKEY} > /root/.ssh/authorized_keys
              chmod 600 /root/.ssh/authorized_keys
              hostnamectl set-hostname ${SERVERNAME}.harvard.edu --pretty
              hostnamectl set-hostname ${SERVERNAME}.harvard.edu --static
              hostnamectl set-hostname ${SERVERNAME}.harvard.edu --transient
            - USERNAME: !Ref UserName
              USERPUBLICSSHKEY: !Ref UserPublicSSHKey
              ANSIBLEPUBLICSSHKEY: !Ref AnsiblePublicSSHKey
              SERVERNAME: !Sub ${AWS::StackName}

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  privateIP:
    Value: !GetAtt NetworkInterface.PrimaryPrivateIpAddress
