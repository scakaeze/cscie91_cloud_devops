Description:
    VPC with three public and three private subnets.
    A pair of one public & private subnets reside in the same availability zone.

Parameters:

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.10.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the first public subnet
        Type: String
        Default: 10.10.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the second public subnet
        Type: String
        Default: 10.10.2.0/24

    PublicSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the third public subnet
        Type: String
        Default: 10.10.4.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the first public subnet
        Type: String
        Default: 10.10.1.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the second public subnet
        Type: String
        Default: 10.10.3.0/24

    PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the third public subnet
        Type: String
        Default: 10.10.5.0/24

    AvailabilityZone1:
        Description: AWS Availability Zones
        Type: AWS::EC2::AvailabilityZone::Name

    AvailabilityZone2:
        Description: AWS Availability Zones
        Type: AWS::EC2::AvailabilityZone::Name

    AvailabilityZone3:
        Description: AWS Availability Zones
        Type: AWS::EC2::AvailabilityZone::Name

Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags:
                - Key: Name
                  Value: !Ref AWS::StackName

    SSHANDWEB:
        Type: 'AWS::EC2::SecurityGroup'
        DependsOn: VPC
        Properties:
            GroupName: !Sub ${AWS::StackName}_SSH_WEB_INTERNET
            VpcId: !Ref VPC
            GroupDescription: port 22 (for ssh), port 80 and port 443 are open to the internet
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: '22'
                  ToPort: '22'
                  CidrIp: 0.0.0.0/0

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} IGW

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone1
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Subnet ${AvailabilityZone1}

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone2
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Subnet ${AvailabilityZone2}

    PublicSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone3
            CidrBlock: !Ref PublicSubnet3CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Subnet ${AvailabilityZone3}

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone1
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private Subnet ${AvailabilityZone1}

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone2
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private subnet ${AvailabilityZone2}

    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone3
            CidrBlock: !Ref PrivateSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private subnet ${AvailabilityZone3}

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGW:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1


    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Routes

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGW

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet2

    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet3


Outputs:

  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PUBLIC1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PUBLIC-1

  PUBLIC2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PUBLIC-2

  PUBLIC3:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PUBLIC-3

  PRIVATE1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PRIVATE-1

  PRIVATE2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PRIVATE-2

  PRIVATE3:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PRIVATE-3

  SG:
    Value: !Ref SSHANDWEB
    Export:
      Name: !Sub ${AWS::StackName}-SSHANDWEB
