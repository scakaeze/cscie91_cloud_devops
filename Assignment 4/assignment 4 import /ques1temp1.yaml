AWSTemplateFormatVersion: 2010-09-09

Description: "AWS CloudFormation Template to create a VPC with two public subnets"

Mappings:
  CIDRConfig:
    VPC:
      CIDR: 10.10.0.0/16
    Public1:
      CIDR: 10.10.0.0/17
    Public2:
      CIDR: 10.10.128.0/17

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - CIDRConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - CIDRConfig
        - Public1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - CIDRConfig
        - Public2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public2'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRT1'

  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRT2'

  PublicRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  SSHANDWEB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 6-ec2-all-default-but-ami-sg-type-subnet-userEnvVarsInUserdata-and-output
      VpcId: !Ref VPC
      GroupDescription: port 22 (for ssh), port 80 and port 443 are open to the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0


Outputs:

  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
    Export:
      Name: 'E91VPC'

  PublicSubnet1:
    Description: SubnetId of the public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: 'E91PublicSub1'

  PublicSubnet2:
    Description: SubnetId of the public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: 'E91PublicSub2'

  SecGrp:
    Description: Security group ID of the VPC
    Value: !Ref SSHANDWEB
    Export:
      Name: 'E91SecGrp'
